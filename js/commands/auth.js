// Generated by CoffeeScript 2.2.0
var algo, crypto, ip, msgpack, scramble, sha1, xor;

msgpack = require("msgpack-lite");

crypto = require("crypto");

ip = require("../iproto");

algo = msgpack.encode("chap-sha1");

module.exports = function(opts) {
  var buf, i, pass, user;
  user = msgpack.encode(opts.user);
  buf = this.alloc(44 + user.length);
  // map with 2 pairs
  buf[i = 14] = 0x82;
  // username : string
  buf[++i] = ip.USERNAME;
  user.copy(buf, ++i);
  i += user.length;
  // array of 2 values
  buf[i] = ip.TUPLE;
  buf[++i] = 0x92;
  // password algorithm
  algo.copy(buf, ++i);
  i += algo.length;
  // password : string(20)
  buf[i] = 0xb4;
  pass = scramble(opts.password || "", opts.salt);
  pass.copy(buf, ++i);
};

sha1 = function(val) {
  return crypto.createHash("sha1").update(val).digest();
};

xor = function(a, b) {
  var buf, i, len;
  i = -1;
  len = Math.max(a.length, b.length);
  buf = Buffer.allocUnsafe(len);
  while (++i < len) {
    buf[i] = a[i] ^ b[i];
  }
  return buf;
};

scramble = function(pass, salt) {
  salt = new Buffer(salt, "base64");
  pass = sha1(pass);
  return xor(pass, sha1(Buffer.concat([salt.slice(0, 20), sha1(pass)])));
};
