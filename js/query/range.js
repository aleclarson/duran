// Generated by CoffeeScript 2.2.0
var MAX_UINT32, Range, extend, ip, mapFn, set, unimpl, withFormat;

({extend, mapFn, set, unimpl, withFormat} = require("../utils"));

ip = require("../iproto");

MAX_UINT32 = 0xffffffff;

Range = function(space) {
  this.space = space;
  set(this, "_trace", Error());
  return this;
};

extend(Range, {
  nth: unimpl("Range#nth"),
  where: unimpl("Range#where"),
  update: unimpl("Range#update"),
  delete: unimpl("Range#delete"),
  run: function() {
    return this.space._box._request(ip.SELECT, {
      query: this,
      transform: mapFn(withFormat(this.space._format))
    });
  },
  then: function(resolveFn, rejectFn) {
    return this.run().then(resolveFn, rejectFn);
  },
  catch: function(rejectFn) {
    return this.run().catch(rejectFn);
  },
  _build: function() {
    var index, space;
    ({space, index} = this);
    space._exists();
    if (typeof index === "string") {
      index = space._indexMap[index];
    }
    return {
      space: space.id,
      index: index || 0,
      offset: this.offset || 0,
      limit: this.limit || MAX_UINT32,
      iter: this.iter || ip.ALL,
      key: this.key || []
    };
  }
});

module.exports = Range;
