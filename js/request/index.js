// Generated by CoffeeScript 2.2.0
var MAX_UINT32, Request, commands, extend, ip, nextId, noop, uhoh;

({extend, uhoh} = require("../utils"));

commands = require("../commands");

noop = require("noop");

ip = require("../iproto");

MAX_UINT32 = 0xFFFFFFFF;

nextId = 1;

Request = function(cmd, opts = {}) {
  this.id = nextId++;
  if (nextId > MAX_UINT32) {
    nextId = 1;
  }
  // `cmd` or `opts.query.cmd` must exist before sending.
  this.cmd = cmd || null;
  if (opts.query) {
    this.query = opts.query;
  } else {
    this.build(cmd, opts);
  }
  // The response can be transformed.
  this.transform = opts.transform || noop.arg1;
  // Stalled requests can be rejected after some delay.
  if (typeof opts.timeout === "number") {
    this.timeout = opts.timeout;
  }
  this.promise = new Promise((resolve, reject) => {
    this.resolve = resolve;
    this.reject = reject;
  });
  return this;
};

extend(Request, {
  alloc: function(len) {
    var buf;
    buf = Buffer.allocUnsafe(len + 5);
    buf[0] = 0xce;
    buf.writeUInt32BE(len, 1);
    buf[5] = 0x82;
    buf[6] = ip.CODE;
    buf[7] = this.cmd;
    buf[8] = ip.SYNC;
    buf[9] = 0xce;
    buf.writeUInt32BE(this.id, 10);
    return this.buf = buf;
  },
  build: function(cmd, opts) {
    commands.get(cmd).call(this, opts);
  }
});

module.exports = Request;
