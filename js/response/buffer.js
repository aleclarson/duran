// Generated by CoffeeScript 2.2.0
// We must use a "sliding buffer" to parse responses:
//   - a response's size is consumed before its body
//   - many responses can exist in the buffer at any time
var createBuffer, grow_until;

createBuffer = function() {
  var body_size, buf, growth_factor, len, pos;
  buf = Buffer.allocUnsafe(1024 * 10);
  // The current position in the buffer
  pos = 0;
  // How many bytes are currently used
  len = 0;
  // The size of the next response body
  body_size = -1;
  // Double the buffer size when necessary
  growth_factor = 2;
  return {
    // Returns true if all responses have been consumed.
    is_empty: function() {
      return len === 0;
    },
    // Consume a response size.
    size: function() {
      if (body_size < 0 && len >= 5) {
        body_size = buf.readUInt32BE(pos + 1);
        pos += 5;
        len -= 5;
      }
      return body_size;
    },
    // Consume a response body.
    read: function() {
      var res;
      if (body_size < 0) {
        throw Error("Response body has unknown size");
      }
      if (len >= body_size) {
        res = buf.slice(pos, body_size);
        if (res.length === len) {
          pos = 0;
          len = 0;
        } else {
          pos += body_size;
          len -= body_size;
        }
        body_size = -1;
        return res;
      }
    },
    // Append data from their buffer into ours.
    write: function(data, data_pos = 0, data_len = data.length) {
      var next_buf, next_len;
      next_len = pos + len + data_len;
      // Grow our buffer if necessary.
      if (next_len > buf.length) {
        next_len = grow_until(next_len, buf.length, growth_factor);
        next_buf = Buffer.allocUnsafe(next_len);
        buf.copy(next_buf, 0, pos, pos + len);
        buf = next_buf;
        pos = 0;
      }
      data.copy(buf, pos + len, data_pos, data_pos + data_len);
      len += data_len;
    },
    reset: function() {
      pos = 0;
      len = 0;
      body_size = -1;
    }
  };
};

module.exports = createBuffer;

grow_until = function(target_size, current_size, growth_factor) {
  var size;
  size = current_size;
  while (size < target_size) {
    size *= growth_factor;
  }
  return size;
};
