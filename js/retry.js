// Generated by CoffeeScript 2.2.0
var empty, getTimeout, noop, resolved, retry;

noop = require("noop");

resolved = Promise.resolve();

empty = {};

retry = function(fn, opts = empty) {
  var cancelled, exponent, limit, maxTimeout, minTimeout, onError, run, shouldRetry, timeout, tries;
  tries = 0;
  limit = opts.limit || 2e308;
  exponent = opts.exponent || 2.2;
  maxTimeout = 1000 * (opts.maxTimeout || 120);
  minTimeout = 1000 * (opts.minTimeout || 1);
  shouldRetry = opts.shouldRetry || noop.true;
  cancelled = false;
  run = function() {
    if (!cancelled) {
      return resolved.then(fn).catch(onError);
    }
  };
  onError = function(err) {
    var timeout;
    if (cancelled || tries === limit) {
      return;
    }
    if (shouldRetry(err, tries)) {
      timeout = getTimeout(++tries, exponent, minTimeout, maxTimeout);
      timeout = setTimeout(run, timeout);
    }
  };
  timeout = getTimeout(++tries, exponent, minTimeout, maxTimeout);
  timeout = setTimeout(run, timeout);
  return function() {
    cancelled = true;
    return clearTimeout(timeout);
  };
};

module.exports = retry;

getTimeout = function(tries, exponent, minTimeout, maxTimeout) {
  var timeout;
  timeout = minTimeout;
  // Use exponential backoff after the first 2 tries.
  if (tries > 2) {
    timeout += 1000 * Math.pow(exponent, tries - 2);
    // Multiply by 0.75 - 1.25 to avoid "retry storms"
    timeout *= 0.75 + Math.random() / 2;
    // Apply the hard cap.
    return Math.min(timeout, maxTimeout);
  }
  // Add up to 500ms to avoid "retry storms"
  return timeout + 500 * Math.random();
};
